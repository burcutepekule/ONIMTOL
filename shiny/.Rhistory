rsconnect::deployApp('~/Library/CloudStorage/Dropbox/criticalwindow/code/R/cartoon/DEMO/')
# rm(list=ls())
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(zoo)
library(Rcpp)
library(lubridate)
library(tidyverse)
library(viridis)
library(RColorBrewer)
library(dplyr)
library(plyr)
library(readxl)
library(writexl)
library(ggpubr)
library(ggplot2)
library(gridExtra)
library(lattice)
library(gtable)
library(deSolve)
library(shiny)
##### FOR B TO LOAD LOCALLY
# timeFolder        = '18122023'
# target_timestamp  = '1702914491'
# pathModelOutput   = paste0('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/cartoon/OUT/',timeFolder,'/RDATA')
# pathFigsOutput    = paste0('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/cartoon/OUT/',timeFolder,'/FIGS/READ/')
# summary_df        = readRDS(paste0(pathModelOutput,'/summary_df_',target_timestamp,'.rds'))
#
# level_maE_sim = summary_df[8,]$mean
# b_eIgA_sim    = summary_df[9,]$mean
# d_O2_sim      = summary_df[10,]$mean
# mu_E_sim      = summary_df[11,]$mean
# a_EE_sim      = summary_df[12,]$mean
# kappa_E_sim   = summary_df[13,]$mean
# caE_sim       = summary_df[14,]$mean
# phi_e         = summary_df[15,]$mean
# phi_a         = summary_df[16,]$mean
level_maE_sim = 1.012299
b_eIgA_sim    = 0.01085407
d_O2_sim      = 0.8635295
mu_E_sim      = 0.522502
a_EE_sim      = 5.796709
kappa_E_sim   = 0.7515186
caE_sim       = 9.844969e-05
t_end = 1*735
# run PLOT_YAGAHI_FAMILIES_AGG_2USE_DAILY.R
day_end = t_end
# fit_span = 0.2
# source('PLOT_YAGAHI_FIT_SPAN_5028.R')
# saveRDS(yagahi_data,'yagahi_data_ento.rds')
yagahi_data      = readRDS('yagahi_data_ento.rds')
yagahi_data_ento = yagahi_data %>% filter(family=='Enterobacteriaceae' & day<=day_end)
ento_data        = 0.01*yagahi_data_ento$smoothed_values
init_coating_rat = 0.4
level_E_init     = ento_data[1]
# Function for level_mIgA
level_mIgA_func = function(t, a, b, c) {
value = a * exp(-b * t^c)
value[value<1e-3]=0
return(value)
}
# Function for level_eIgA
level_eIgA_func = function(t, a, b, c, t_off, t_01) {
if (t <= t_off) {
return(0)
} else {
if (t_off < t_01) {
if (t < t_01) {
return(0)
} else {
return(1 - a * exp(-b * (t - t_01)^c))
}
} else {
return(1 - a * exp(-b * (t - t_off)^c))
}
}
}
elio_model = function (t, y, params) {
y    = pmax(y, 0) #THIS IS NECESSARY!
level_maE  = params["level_maE"] # fixed maternal affinity for E
mu_E       = params["mu_E"]
a_EE       = params["a_EE"]
d_O2       = params["d_O2"]
kappa_E    = params["kappa_E"]
caE        = params["caE"]
t_01       = params["t_01"] # fixed maternal affinity for E
bm_on      = params["bm_on"]
en_on      = params["en_on"]
#FIXED
I_half     = 1/7
d_bcell    = 14
a          = 1
c          = 1  # Define c
b_mIgA     = 0.025 # Define b for level_mIgA
b_eIgA     = params["b_eIgA"] # Define b for level_eIgA
t_off      = 30 # Define t_off
## first extract the state variables
level_O2   = y[1]
level_E    = y[2]
level_E_c  = y[3]
level_E_uc = y[4]
level_eaE  = y[5]
level_eaEt = y[6] # delay
# Call level_mIgA and level_eIgA functions
level_mIgA = bm_on*level_mIgA_func(t, a, b_mIgA, c)
level_eIgA = en_on*level_eIgA_func(t, a, b_eIgA, c, t_off, t_01)
# coating & killing parameters
mc_E = level_mIgA*(1/(level_maE+1)) # maternal coating of E
mk_E = level_mIgA*(1-1/(level_maE+1)) # maternal killing of E
ec_E = ifelse(level_eaEt <= d_bcell, 0, 1)*sign(level_eaE)*level_eIgA*(1/(level_eaE+1)) # endogenous coating of E
ek_E = ifelse(level_eaEt <= d_bcell, 0, 1)*sign(level_eaE)*level_eIgA*(1-1/(level_eaE+1)) # endogenous killing of E
c_E   = mc_E+ec_E # total coating of E
k_E   = mk_E+ek_E # total killing of E
# total inflammation
infl_total = (level_E_uc)/(level_E)
# total anaerobe abundance
anae_total = level_E
# Change of O2
dO2_dt    = -d_O2*level_O2*anae_total
# Change of Ent.
dE_dt        = level_E*((1+level_O2)*mu_E-level_E*a_EE)-k_E*level_E # NEG HERE
dE_uc_dt     = dE_dt+I_half*level_E_c-c_E*level_E_uc
dE_c_dt      = 0    -I_half*level_E_c+c_E*level_E_uc
daE_dt  = exp(-caE*t)*sign(level_eIgA)*kappa_E*level_E_uc*infl_total # or use dE_uc_dt
daEt_dt = sign(daE_dt)
dydt    = c(dO2_dt,dE_dt,dE_c_dt,dE_uc_dt,daE_dt,daEt_dt,ec_E,ek_E)
list(dydt)
}
ui <- fluidPage(
titlePanel("Dynamic Shiny App for ODE and ggplot"),
sidebarLayout(
sidebarPanel(
sliderInput("t_plot", "t_plot", min = 5, max = 735, value = 360),
actionButton("toggleButton1", "Breastmilk: On"),
actionButton("toggleButton2", "Endogenous IgA Production: On")
),
mainPanel(
plotOutput("odePlot")
)
)
)
server <- function(input, output, session) {
toggleValue1 <- reactiveVal(1)  # Initially On
toggleValue2 <- reactiveVal(1)  # Initially On
# Observe event for the first toggle button
observeEvent(input$toggleButton1, {
new_val <- ifelse(toggleValue1() == 1, 0, 1)
toggleValue1(new_val)
updateActionButton(session, "toggleButton1", label = paste("Breastmilk :", ifelse(new_val == 1, "On", "Off")))
})
# Observe event for the second toggle button
observeEvent(input$toggleButton2, {
new_val <- ifelse(toggleValue2() == 1, 0, 1)
toggleValue2(new_val)
updateActionButton(session, "toggleButton2", label = paste("Endogenous IgA Production :", ifelse(new_val == 1, "On", "Off")))
})
output$odePlot <- renderPlot({
bm_on_in = toggleValue1()
en_on_in = toggleValue2()
a        = 1
c        = 1  # Define c
b_mIgA   = 0.025 # Define b for level_mIgA
b_eIgA   = b_eIgA_sim # Define b for level_eIgA
t_off    = 30 # Define t_off
t_end = 735*10
times = seq(from = 0, to = t_end, by = 1)
t_01_values = bm_on_in*sapply(times, level_mIgA_func, a, b_mIgA, c)
t_01_in = which(t_01_values < 0.2)[1]
# Update parms based on input values
parms <- c(
level_maE = level_maE_sim,
mu_E      = mu_E_sim,
a_EE      = a_EE_sim,
d_O2      = d_O2_sim,
kappa_E   = kappa_E_sim,
caE       = caE_sim,
t_01      = t_01_in,
b_eIgA    = b_eIgA_sim,
milk_th   = 0.2,
bm_on     = bm_on_in,
en_on     = en_on_in # Replace 'yourParameterName' with the actual parameter name
)
init_coating_rat = 0.4
t_end = 1*(735)
ts    = 0.1
times = seq(from=0,to=t_end,by=0.1)
y_init= c(# initial values
level_O2  = 1,
level_E   = level_E_init,
level_E_c = level_E_init*init_coating_rat, #init_coating_rat
level_E_uc= level_E_init-level_E_init*init_coating_rat, #1-init_coating_rat
level_eaE = 0,
level_eaEt= 0,
ec_E = 0,
ek_E = 0
)
# Run the ODE solver
# Call the ODE solver with the event function
out = ode(
y = y_init,
times = times,
func = elio_model,
parms = parms,
# events = list(func = eventfun, time = times),
method = "impAdams_d",
rtol = 1e-12,    # Reduced relative tolerance
atol = 1e-12     # Reduced absolute tolerance
) %>% as.data.frame()
# Convert to dataframe and plot
out <- as.data.frame(out)
out_long_inspect = out %>%
gather(key = "Type", value = "Level", level_E, level_E_c, level_E_uc, level_eaE)
out_long_Ec  = out_long_inspect %>% filter(Type=='level_E_c')
out_long_Euc = out_long_inspect %>% filter(Type=='level_E_uc')
out_long_E   = out_long_inspect %>% filter(Type=='level_E')
out_long_eaE = out_long_inspect %>% filter(Type=='level_eaE')
eaE_SS = out_long_eaE$Level[dim(out_long_eaE)[1]]
E_SS   = out_long_E$Level[dim(out_long_eaE)[1]]
Euc_SS = out_long_Euc$Level[dim(out_long_eaE)[1]]
Ec_SS  = out_long_Ec$Level[dim(out_long_eaE)[1]]
# Modify the level_eaE column and then gather the data into a long format
out_long_plot <- out %>%
# mutate(level_eaE_norm = level_eaE * (1/4)) %>%
mutate(level_eaE_norm = 0.3*(level_eaE / eaE_SS)) %>% # scaled with 0.3 for plotting
gather(key = "Type", value = "Level", level_E, level_E_c, level_E_uc, level_eaE_norm)
l_mIgA_values  = parms["bm_on"]*level_mIgA_func(times, a, b_mIgA, c)
l_mIgA_df      = data.frame(time = times, Level = l_mIgA_values, Type = "l_mIgA")
l_mIgA_df$Level= 0.3*((1/a)*l_mIgA_df$Level) # scaled with 0.3 for plotting
combined_data  = rbind(out_long_plot[c('time','Type','Level')], l_mIgA_df)
# add yagahi
times_yagahi                = as.numeric(seq(0,(t_end-1)))
yagahi                      = data.frame(time = times_yagahi, Level = as.numeric(ento_data), Type = "yagahi")
combined_data               = rbind(combined_data, yagahi)
plt_until = input$t_plot
combined_data_t = combined_data %>% filter(time<=plt_until)
# Plotting
ggplot(combined_data_t, aes(x = time, y = Level, color = Type, group = Type)) +
geom_line(aes(linetype = Type)) +
# scale_color_manual(values = c("purple","black","red","black", "lightblue", "green", "blue","orange")) + # Include red for l_mIgA
# scale_linetype_manual(values = c("solid","solid","solid", "solid", "solid","dashed", "solid", "solid")) +
scale_color_manual(values = c("darkorange","darkblue","lightblue1", "lightblue3","darkgreen","red"),
labels = c("mIgA level (scaled)", "Enterobacteriacea (total)", "Enterobacteriacea (coated)", "Enterobacteriacea (uncoated)", "eIgA (scaled)","Data (Yagahi et. al)")
) +
scale_linetype_manual(values = c("solid", "solid", "solid","solid", "solid", "dashed"),
labels = c("mIgA level (scaled)", "Enterobacteriacea (total)", "Enterobacteriacea (coated)", "Enterobacteriacea (uncoated)", "eIgA (scaled)","Data (Yagahi et. al)")
) +
theme_minimal() +
labs(title = "Levels of Enterobacteriacea Over Time", x = "Time", y = "Level")
})
}
shinyApp(ui = ui, server = server)
# rm(list=ls())
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(zoo)
library(Rcpp)
library(lubridate)
library(tidyverse)
library(viridis)
library(RColorBrewer)
library(dplyr)
library(plyr)
library(readxl)
library(writexl)
library(ggpubr)
library(ggplot2)
library(gridExtra)
library(lattice)
library(gtable)
library(deSolve)
library(shiny)
##### FOR B TO LOAD LOCALLY
# timeFolder        = '18122023'
# target_timestamp  = '1702914491'
# pathModelOutput   = paste0('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/cartoon/OUT/',timeFolder,'/RDATA')
# pathFigsOutput    = paste0('/Users/burcutepekule/Library/CloudStorage/Dropbox/criticalwindow/code/R/cartoon/OUT/',timeFolder,'/FIGS/READ/')
# summary_df        = readRDS(paste0(pathModelOutput,'/summary_df_',target_timestamp,'.rds'))
#
# level_maE_sim = summary_df[8,]$mean
# b_eIgA_sim    = summary_df[9,]$mean
# d_O2_sim      = summary_df[10,]$mean
# mu_E_sim      = summary_df[11,]$mean
# a_EE_sim      = summary_df[12,]$mean
# kappa_E_sim   = summary_df[13,]$mean
# caE_sim       = summary_df[14,]$mean
# phi_e         = summary_df[15,]$mean
# phi_a         = summary_df[16,]$mean
level_maE_sim = 1.012299
b_eIgA_sim    = 0.01085407
d_O2_sim      = 0.8635295
mu_E_sim      = 0.522502
a_EE_sim      = 5.796709
kappa_E_sim   = 0.7515186
caE_sim       = 9.844969e-05
t_end = 1*735
# run PLOT_YAGAHI_FAMILIES_AGG_2USE_DAILY.R
day_end = t_end
# fit_span = 0.2
# source('PLOT_YAGAHI_FIT_SPAN_5028.R')
# saveRDS(yagahi_data,'yagahi_data_ento.rds')
yagahi_data      = readRDS('yagahi_data_ento.rds')
yagahi_data_ento = yagahi_data %>% filter(family=='Enterobacteriaceae' & day<=day_end)
ento_data        = 0.01*yagahi_data_ento$smoothed_values
init_coating_rat = 0.4
level_E_init     = ento_data[1]
# Function for level_mIgA
level_mIgA_func = function(t, a, b, c) {
value = a * exp(-b * t^c)
value[value<1e-3]=0
return(value)
}
# Function for level_eIgA
level_eIgA_func = function(t, a, b, c, t_off, t_01) {
if (t <= t_off) {
return(0)
} else {
if (t_off < t_01) {
if (t < t_01) {
return(0)
} else {
return(1 - a * exp(-b * (t - t_01)^c))
}
} else {
return(1 - a * exp(-b * (t - t_off)^c))
}
}
}
elio_model = function (t, y, params) {
y    = pmax(y, 0) #THIS IS NECESSARY!
level_maE  = params["level_maE"] # fixed maternal affinity for E
mu_E       = params["mu_E"]
a_EE       = params["a_EE"]
d_O2       = params["d_O2"]
kappa_E    = params["kappa_E"]
caE        = params["caE"]
t_01       = params["t_01"] # fixed maternal affinity for E
bm_on      = params["bm_on"]
en_on      = params["en_on"]
#FIXED
I_half     = 1/7
d_bcell    = 14
a          = 1
c          = 1  # Define c
b_mIgA     = 0.025 # Define b for level_mIgA
b_eIgA     = params["b_eIgA"] # Define b for level_eIgA
t_off      = 30 # Define t_off
## first extract the state variables
level_O2   = y[1]
level_E    = y[2]
level_E_c  = y[3]
level_E_uc = y[4]
level_eaE  = y[5]
level_eaEt = y[6] # delay
# Call level_mIgA and level_eIgA functions
level_mIgA = bm_on*level_mIgA_func(t, a, b_mIgA, c)
level_eIgA = en_on*level_eIgA_func(t, a, b_eIgA, c, t_off, t_01)
# coating & killing parameters
mc_E = level_mIgA*(1/(level_maE+1)) # maternal coating of E
mk_E = level_mIgA*(1-1/(level_maE+1)) # maternal killing of E
ec_E = ifelse(level_eaEt <= d_bcell, 0, 1)*sign(level_eaE)*level_eIgA*(1/(level_eaE+1)) # endogenous coating of E
ek_E = ifelse(level_eaEt <= d_bcell, 0, 1)*sign(level_eaE)*level_eIgA*(1-1/(level_eaE+1)) # endogenous killing of E
c_E   = mc_E+ec_E # total coating of E
k_E   = mk_E+ek_E # total killing of E
# total inflammation
infl_total = (level_E_uc)/(level_E)
# total anaerobe abundance
anae_total = level_E
# Change of O2
dO2_dt    = -d_O2*level_O2*anae_total
# Change of Ent.
dE_dt        = level_E*((1+level_O2)*mu_E-level_E*a_EE)-k_E*level_E # NEG HERE
dE_uc_dt     = dE_dt+I_half*level_E_c-c_E*level_E_uc
dE_c_dt      = 0    -I_half*level_E_c+c_E*level_E_uc
daE_dt  = exp(-caE*t)*sign(level_eIgA)*kappa_E*level_E_uc*infl_total # or use dE_uc_dt
daEt_dt = sign(daE_dt)
dydt    = c(dO2_dt,dE_dt,dE_c_dt,dE_uc_dt,daE_dt,daEt_dt,ec_E,ek_E)
list(dydt)
}
ui <- fluidPage(
titlePanel("Dynamic Shiny App for ODE and ggplot"),
sidebarLayout(
sidebarPanel(
sliderInput("t_plot", "t_plot", min = 5, max = 735, value = 360),
actionButton("toggleButton1", "Breastmilk: On"),
actionButton("toggleButton2", "Endogenous IgA Production: On")
),
mainPanel(
plotOutput("odePlot")
)
)
)
server <- function(input, output, session) {
toggleValue1 <- reactiveVal(1)  # Initially On
toggleValue2 <- reactiveVal(1)  # Initially On
# Observe event for the first toggle button
observeEvent(input$toggleButton1, {
new_val <- ifelse(toggleValue1() == 1, 0, 1)
toggleValue1(new_val)
updateActionButton(session, "toggleButton1", label = paste("Breastmilk :", ifelse(new_val == 1, "On", "Off")))
})
# Observe event for the second toggle button
observeEvent(input$toggleButton2, {
new_val <- ifelse(toggleValue2() == 1, 0, 1)
toggleValue2(new_val)
updateActionButton(session, "toggleButton2", label = paste("Endogenous IgA Production :", ifelse(new_val == 1, "On", "Off")))
})
output$odePlot <- renderPlot({
bm_on_in = toggleValue1()
en_on_in = toggleValue2()
a        = 1
c        = 1  # Define c
b_mIgA   = 0.025 # Define b for level_mIgA
b_eIgA   = b_eIgA_sim # Define b for level_eIgA
t_off    = 30 # Define t_off
t_end = 735*10
times = seq(from = 0, to = t_end, by = 1)
t_01_values = bm_on_in*sapply(times, level_mIgA_func, a, b_mIgA, c)
t_01_in = which(t_01_values < 0.2)[1]
# Update parms based on input values
parms <- c(
level_maE = level_maE_sim,
mu_E      = mu_E_sim,
a_EE      = a_EE_sim,
d_O2      = d_O2_sim,
kappa_E   = kappa_E_sim,
caE       = caE_sim,
t_01      = t_01_in,
b_eIgA    = b_eIgA_sim,
milk_th   = 0.2,
bm_on     = bm_on_in,
en_on     = en_on_in # Replace 'yourParameterName' with the actual parameter name
)
init_coating_rat = 0.4
t_end = 1*(735)
ts    = 0.1
times = seq(from=0,to=t_end,by=0.1)
y_init= c(# initial values
level_O2  = 1,
level_E   = level_E_init,
level_E_c = level_E_init*init_coating_rat, #init_coating_rat
level_E_uc= level_E_init-level_E_init*init_coating_rat, #1-init_coating_rat
level_eaE = 0,
level_eaEt= 0,
ec_E = 0,
ek_E = 0
)
# Run the ODE solver
# Call the ODE solver with the event function
out = ode(
y = y_init,
times = times,
func = elio_model,
parms = parms,
# events = list(func = eventfun, time = times),
method = "impAdams_d",
rtol = 1e-12,    # Reduced relative tolerance
atol = 1e-12     # Reduced absolute tolerance
) %>% as.data.frame()
# Convert to dataframe and plot
out <- as.data.frame(out)
out_long_inspect = out %>%
gather(key = "Type", value = "Level", level_E, level_E_c, level_E_uc, level_eaE)
out_long_Ec  = out_long_inspect %>% filter(Type=='level_E_c')
out_long_Euc = out_long_inspect %>% filter(Type=='level_E_uc')
out_long_E   = out_long_inspect %>% filter(Type=='level_E')
out_long_eaE = out_long_inspect %>% filter(Type=='level_eaE')
eaE_SS = out_long_eaE$Level[dim(out_long_eaE)[1]]
E_SS   = out_long_E$Level[dim(out_long_eaE)[1]]
Euc_SS = out_long_Euc$Level[dim(out_long_eaE)[1]]
Ec_SS  = out_long_Ec$Level[dim(out_long_eaE)[1]]
# Modify the level_eaE column and then gather the data into a long format
out_long_plot <- out %>%
# mutate(level_eaE_norm = level_eaE * (1/4)) %>%
mutate(level_eaE_norm = 0.3*(level_eaE / eaE_SS)) %>% # scaled with 0.3 for plotting
gather(key = "Type", value = "Level", level_E, level_E_c, level_E_uc, level_eaE_norm)
l_mIgA_values  = parms["bm_on"]*level_mIgA_func(times, a, b_mIgA, c)
l_mIgA_df      = data.frame(time = times, Level = l_mIgA_values, Type = "l_mIgA")
l_mIgA_df$Level= 0.3*((1/a)*l_mIgA_df$Level) # scaled with 0.3 for plotting
combined_data  = rbind(out_long_plot[c('time','Type','Level')], l_mIgA_df)
# add yagahi
times_yagahi                = as.numeric(seq(0,(t_end-1)))
yagahi                      = data.frame(time = times_yagahi, Level = as.numeric(ento_data), Type = "yagahi")
combined_data               = rbind(combined_data, yagahi)
plt_until = input$t_plot
combined_data_t = combined_data %>% filter(time<=plt_until)
# Plotting
ggplot(combined_data_t, aes(x = time, y = Level, color = Type, group = Type)) +
geom_line(aes(linetype = Type)) +
# scale_color_manual(values = c("purple","black","red","black", "lightblue", "green", "blue","orange")) + # Include red for l_mIgA
# scale_linetype_manual(values = c("solid","solid","solid", "solid", "solid","dashed", "solid", "solid")) +
scale_color_manual(values = c("darkorange","darkblue","lightblue1", "lightblue3","darkgreen","red"),
labels = c("mIgA level (scaled)", "Enterobacteriacea (total)", "Enterobacteriacea (coated)", "Enterobacteriacea (uncoated)", "eIgA (scaled)","Data (Yagahi et. al)")
) +
scale_linetype_manual(values = c("solid", "solid", "solid","solid", "solid", "dashed"),
labels = c("mIgA level (scaled)", "Enterobacteriacea (total)", "Enterobacteriacea (coated)", "Enterobacteriacea (uncoated)", "eIgA (scaled)","Data (Yagahi et. al)")
) +
theme_minimal() +
labs(title = "Levels of Enterobacteriacea Over Time", x = "Time", y = "Level")
})
}
shinyApp(ui = ui, server = server)
runApp()
Ec_SS  = out_long_Ec$Level[dim(out_long_eaE)[1]]
library(rsconnect)
rsconnect::deployApp('~/Library/CloudStorage/Dropbox/criticalwindow/code/R/cartoon/A03_SHINY_YAGAHI.R')
library(rsconnect)
rsconnect::deployApp('~/Library/CloudStorage/Dropbox/criticalwindow/code/R/cartoon/DEMO/‘)
library(rsconnect)
rsconnect::deployApp('~/Library/CloudStorage/Dropbox/criticalwindow/code/R/cartoon/DEMO/')
runApp()
runApp()
runApp()
rsconnect::deployApp('~/Library/CloudStorage/Dropbox/criticalwindow/code/R/cartoon/DEMO/‘)
rsconnect::deployApp('~/Library/CloudStorage/Dropbox/criticalwindow/code/R/cartoon/DEMO/')
